//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

import SwiftParser
import SwiftSyntax
import XCTest
import _SwiftSyntaxTestSupport

public class IncrementalParsingTests: ParserTestCase {

  public func testBrokenMemberFunction() {
    assertIncrementalParse(
      """
      struct A‚è©Ô∏è‚è∏Ô∏èA‚è™Ô∏è { func f() {
      """,
      reusedNodes: [
        ReusedNodeSpec("func f() {", kind: .memberDeclListItem)
      ]
    )
  }

  public func testReusedNode() {
    assertIncrementalParse(
      """
      struct A‚è©Ô∏è‚è∏Ô∏èA‚è™Ô∏è {}
      struct B {}
      """,
      reusedNodes: [
        ReusedNodeSpec("struct B {}", kind: .codeBlockItem)
      ]
    )
  }

  public func testAddElse() {
    assertIncrementalParse(
      """
      #if false
        ‚è©Ô∏è‚è∏Ô∏è#else‚è™Ô∏è
      """
    )
  }

  public func testInsertSpace() {
    assertIncrementalParse(
      """
      class AnimationType {
        func foo(x: Blah) {
          switch x {
          case (.

      extension AnimationType {
        public‚è©Ô∏è‚è∏Ô∏è ‚è™Ô∏è
      """
    )
  }

  public func testAddFuncParens() {
    assertIncrementalParse(
      """
      class InvalidFuncDecls {
        func parensAdded‚è©Ô∏è‚è∏Ô∏è()‚è™Ô∏è {
        }
      }
      """
    )
  }

  public func testAddOpeningBrace() {
    assertIncrementalParse(
      """
      class InvalidFuncDecls {
        func openingBraceAdded() ‚è©Ô∏è‚è∏Ô∏è{‚è™Ô∏è
      }
      """
    )
  }

  public func testAddClosingBrace() {
    assertIncrementalParse(
      """
      class InvalidFuncDecls {
        func closingBraceAdded() {

        ‚è©Ô∏è‚è∏Ô∏è}‚è™Ô∏è
      }
      """
    )
  }

  public func testRemoveFuncKeyword() {
    assertIncrementalParse(
      """
      class InvalidFuncDecls {
        ‚è©Ô∏èfunc‚è∏Ô∏è‚è™Ô∏è funcKeywordRemoved() {
        
        }
      }
      """
    )
  }

  public func testAddParamName() {
    assertIncrementalParse(
      """
      class InvalidFuncDecls {
        func addingParamName(‚è©Ô∏è‚è∏Ô∏èarg‚è™Ô∏è) {
        
        }
      }
      """
    )
  }

  public func testAddParamColon() {
    assertIncrementalParse(
      """
      class InvalidFuncDecls {
        func addingParamColon(arg‚è©Ô∏è‚è∏Ô∏è:‚è™Ô∏è) {
        }
      }
      """
    )
  }

  public func testAddingParamType() {
    assertIncrementalParse(
      """
      class InvalidFuncDecls {
        func addingParamType(arg:‚è©Ô∏è‚è∏Ô∏è String‚è™Ô∏è) {
        }
      }
      """
    )
  }

  public func testInsertTextIdentifier() {
    assertIncrementalParse(
      """
      self = ‚è©Ô∏è‚è∏Ô∏è_                            _‚è™Ô∏èfoo(1)[object1, object2] + bar(1)
      """
    )
  }

  public func testNestedInitializers() {
    assertIncrementalParse(
      """
      class NestedInitializers {
        ‚è©Ô∏è‚è∏Ô∏èinit() {‚è™Ô∏è
          init() {

          }
        ‚è©Ô∏è‚è∏Ô∏è}‚è™Ô∏è
      }
      """
    )
  }

  public func testMultiEditMapping() {
    assertIncrementalParse(
      """
      let one: Int;let two: Int; let three: Int; ‚è©Ô∏è‚è∏Ô∏è                      ‚è™Ô∏è‚è©Ô∏è‚è∏Ô∏è   ‚è™Ô∏èlet found: Int;let five: Int;
      """,
      reusedNodes: [
        ReusedNodeSpec("let one: Int;", kind: .codeBlockItem),
        ReusedNodeSpec("let two: Int;", kind: .codeBlockItem),
        ReusedNodeSpec("let five: Int;", kind: .codeBlockItem),
      ]
    )
  }

  public func testAddProperty() {
    assertIncrementalParse(
      """
      struct Foo {
        let a: Int
        let b: Int
        let c: Int
        let d: String
        ‚è©Ô∏è‚è∏Ô∏èlet e_newProp: String‚è™Ô∏è
        let f: Int
        let g: Int
      }
      """,
      reusedNodes: [
        ReusedNodeSpec("let a: Int", kind: .memberDeclListItem),
        ReusedNodeSpec("let b: Int", kind: .memberDeclListItem),
        ReusedNodeSpec("let c: Int", kind: .memberDeclListItem),
        ReusedNodeSpec("let g: Int", kind: .memberDeclListItem),
      ]
    )
  }

  public func testWarpInClass() {
    assertIncrementalParse(
      """
      ‚è©Ô∏è‚è∏Ô∏èclass Foo {‚è™Ô∏è
        func foo1() {
          print("Hello Foo!")
        }

        func foo2() {
          print("Hello again")
        }
      """,
      reusedNodes: [
        ReusedNodeSpec(
          """
          print("Hello Foo!")
          """,
          kind: .codeBlockItem
        ),
        ReusedNodeSpec(
          """
          print("Hello again")
          """,
          kind: .codeBlockItem
        ),
      ]
    )
  }

  public func testUnwarpClass() {
    assertIncrementalParse(
      """
      ‚è©Ô∏èclass Bar {‚è∏Ô∏è‚è™Ô∏è
        func bar1() {
          let pi = 3.1415
          print("Pi is (approximately) \\(pi)")
        }

        func bar2() {
          print("I can compute Pi as well:")
          bar1()
        }
      }
      """,
      reusedNodes: [
        ReusedNodeSpec(
          """
          let pi = 3.1415
          """,
          kind: .codeBlockItem
        ),
        ReusedNodeSpec(
          """
          print("Pi is (approximately) \\(pi)")
          """,
          kind: .codeBlockItem
        ),
        ReusedNodeSpec(
          """
          print("I can compute Pi as well:")
          """,
          kind: .codeBlockItem
        ),
        ReusedNodeSpec(
          """
          bar1()
          """,
          kind: .codeBlockItem
        ),
      ]
    )
  }

  public func testNextTokenCalculation() {
    assertIncrementalParse(
      """
          let a = "hello"
          let c = "‚è©Ô∏è ‚è∏Ô∏è‚è™Ô∏èworld"
      """,
      reusedNodes: [
        ReusedNodeSpec("let a = \"hello\"", kind: .codeBlockItem)
      ]
    )
  }

  public func testReplace() {
    assertIncrementalParse(
      """
      func foo() {
      }

      _ = ‚è©Ô∏è6‚è∏Ô∏è7‚è™Ô∏è
      """,
      reusedNodes: [
        ReusedNodeSpec(
          """
          func foo() {
          }
          """,
          kind: .codeBlockItem
        )
      ]
    )
  }

  public func testReplaceByLonger() {
    assertIncrementalParse(
      """
      _ = ‚è©Ô∏è6‚è∏Ô∏è"Hello World"‚è™Ô∏è
      """
    )
  }

  public func testReplaceByShorter() {
    assertIncrementalParse(
      """
      _ = ‚è©Ô∏è"Hello again"‚è∏Ô∏è"a"‚è™Ô∏è
      """
    )
  }

  public func testInsert() {
    assertIncrementalParse(
      """
      ‚è©Ô∏è‚è∏Ô∏èfoo()‚è™Ô∏è
      """
    )
  }

  public func testRemove() {
    assertIncrementalParse(
      """
      ‚è©Ô∏èprint("abc")‚è∏Ô∏è‚è™Ô∏è
      """
    )
  }

  public func testAttachToPrevNode() {
    assertIncrementalParse(
      """
      foo()
      ‚è©Ô∏è‚è∏Ô∏è{}‚è™Ô∏è
      _ = 1
      """
    )
  }

  public func testClassSurrounding() {
    assertIncrementalParse(
      """
      ‚è©Ô∏è‚è∏Ô∏èclass C {‚è™Ô∏è
        func method1() {}
      """
    )
  }

  public func testMultiEdit() {
    assertIncrementalParse(
      """
      ‚è©Ô∏è‚è∏Ô∏èclass C {‚è™Ô∏è
        func method1() {}
      ‚è©Ô∏è‚è∏Ô∏è}‚è™Ô∏è
      """
    )
  }

  public func testMultiEditSameLine() {
    assertIncrementalParse(
      """
      ‚è©Ô∏è_‚è∏Ô∏èlet x‚è™Ô∏è = ‚è©Ô∏è1‚è∏Ô∏è"hi"‚è™Ô∏è
      """
    )
  }

  public func testReplaceWithMultiByteChar() {
    assertIncrementalParse(
      """
      let x = "‚è©Ô∏èa‚è∏Ô∏èüë®‚Äçüë©‚Äçüëß‚Äçüë¶‚è™Ô∏è"
      """
    )
  }

  public func testReplaceMultiByteCharWithShorter() {
    assertIncrementalParse(
      """
      let x = "‚è©Ô∏èüë®‚Äçüë©‚Äçüëß‚Äçüë¶‚è∏Ô∏èüéâ‚è™Ô∏è"
      """
    )
  }

  public func testLastCharOfStruct() {
    assertIncrementalParse(
      """
      private struc‚è©Ô∏è‚è∏Ô∏èt‚è™Ô∏è MyStruct {
      }
      """
    )
  }

  public func testAddArrayCloseBracket() {
    assertIncrementalParse(
      """
      var computedVar: [Int] {
        return [1
        ‚è©Ô∏è‚è∏Ô∏è]‚è™Ô∏è
      }
      """
    )
  }

  public func testAddIfOpenBrace() {
    assertIncrementalParse(
      """
      if true ‚è©Ô∏è‚è∏Ô∏è{‚è™Ô∏è
        _ = 5
      }
      """
    )
  }

  public func testExtendIdentifier() {
    assertIncrementalParse(
      """
      let y‚è©Ô∏è‚è∏Ô∏èou‚è™Ô∏è = 42
      """
    )
  }

  public func testTrailingClosure() {
    assertIncrementalParse(
      """
      foo() {}
      trailingClosure: ‚è©Ô∏èswitch x {
        default: break
      }‚è∏Ô∏è{}‚è™Ô∏è
      """
    )
  }

  public func testMultiFunctionCall() {
    assertIncrementalParse(
      """
      foo() {}
      foo1() {}
      foo2() {}
      ‚è©Ô∏è‚è∏Ô∏èfoo3() {}‚è™Ô∏è
      """,
      reusedNodes: [
        ReusedNodeSpec("foo() {}", kind: .codeBlockItem),
        ReusedNodeSpec("foo1() {}", kind: .codeBlockItem),
      ]
    )
  }

  public func testDeclFollowedByLabeledStmt() {
    assertIncrementalParse(
      """
      class foo {}
      trailingClosure: ‚è©Ô∏èswitch x {
        default: break
      }‚è∏Ô∏è{}‚è™Ô∏è
      """,
      reusedNodes: [
        ReusedNodeSpec("class foo {}", kind: .codeBlockItem)
      ]
    )
  }
}
